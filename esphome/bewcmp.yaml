# === BLOCK: BEWÄSSERUNGSCOMPUTER_CONFIG ===
# Zweck: ESPHome Bewässerungscomputer mit 2 Zonen
# Status: ✅ Sicherheit korrigiert - Secrets verwendet
# Hardware: ESP8266 mit 2 Relais für Ventile
# IP: 192.168.2.153

esphome:
  name: bewcmp
  friendly_name: Bewässerungscomputer
  on_boot:
    priority: -100
    then:
      - logger.log: "Bewässerungscomputer gestartet"
      - delay: 2s
      - if:
          condition:
            wifi.connected:
          then:
            - logger.log: "WiFi verbunden bei Boot"
          else:
            - logger.log: "WiFi nicht verbunden"

esp8266:
  board: esp01_1m
  restore_from_flash: true

logger:
  level: INFO

# === BLOCK: API_SICHER ===
api:
  encryption:
    key: !secret api_key  # SICHER - aus secrets.yaml
  reboot_timeout: 15min
# === END BLOCK: API_SICHER ===

# === BLOCK: OTA_SICHER ===
ota:
  platform: esphome
  password: !secret ota_password  # SICHER - aus secrets.yaml
# === END BLOCK: OTA_SICHER ===

# === BLOCK: WIFI_SICHER ===
wifi:
  ssid: !secret wifi_ssid  # SICHER - aus secrets.yaml
  password: !secret wifi_password  # SICHER - aus secrets.yaml
  manual_ip:
    static_ip: 192.168.2.153
    gateway: 192.168.2.1
    subnet: 255.255.255.0
    dns1: 192.168.2.1
  
  fast_connect: true
  power_save_mode: none
  reboot_timeout: 30min
  
  ap:
    ssid: "Bewcmp Fallback"
    password: !secret ap_password  # SICHER - aus secrets.yaml
# === END BLOCK: WIFI_SICHER ===

captive_portal:

# === BLOCK: TIME_SYNC ===
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Amsterdam
    servers:
      - 192.168.2.1
      - pool.ntp.org
    on_time_sync:
      then:
        - logger.log: "Zeit synchronisiert"
# === END BLOCK: TIME_SYNC ===

# === BLOCK: GLOBALS ===
globals:
  - id: wifi_reconnect_count
    type: int
    restore_value: yes
    initial_value: '0'
  
  - id: total_water_time_today
    type: int
    restore_value: yes
    initial_value: '0'
  
  - id: last_watering_timestamp
    type: time_t
    restore_value: yes
    initial_value: '0'
# === END BLOCK: GLOBALS ===

# === BLOCK: MONITORING_INTERVALS ===
interval:
  # WiFi Monitoring alle 30s
  - interval: 30s
    then:
      - if:
          condition:
            not:
              wifi.connected:
          then:
            - logger.log: "WiFi getrennt - Reconnect Count erhöht"
            - lambda: |-
                id(wifi_reconnect_count) += 1;
  
  # Bewässerungszeit-Tracking
  - interval: 60s
    then:
      - if:
          condition:
            or:
              - lambda: 'return id(zone_1_relay).state;'
              - lambda: 'return id(zone_2_relay).state;'
          then:
            - lambda: |-
                id(total_water_time_today) += 60;
                id(last_watering_timestamp) = id(sntp_time).now().timestamp;
  
  # Täglicher Reset um Mitternacht
  - interval: 60s
    then:
      - if:
          condition:
            lambda: |-
              auto time = id(sntp_time).now();
              return time.hour == 0 && time.minute == 0;
          then:
            - logger.log: "Täglicher Reset der Zähler"
            - lambda: |-
                id(total_water_time_today) = 0;
# === END BLOCK: MONITORING_INTERVALS ===

# === BLOCK: RELAIS_SWITCHES ===
switch:
  - platform: gpio
    name: "Zone 1 Relais"
    pin: GPIO3
    id: zone_1_relay
    restore_mode: ALWAYS_OFF
    internal: false
    on_turn_on:
      - logger.log: "Zone 1 aktiviert"
    on_turn_off:
      - logger.log: "Zone 1 deaktiviert"
  
  - platform: gpio
    name: "Zone 2 Relais"
    pin: GPIO4
    id: zone_2_relay
    restore_mode: ALWAYS_OFF
    internal: false
    on_turn_on:
      - logger.log: "Zone 2 aktiviert"
    on_turn_off:
      - logger.log: "Zone 2 deaktiviert"
# === END BLOCK: RELAIS_SWITCHES ===

# === BLOCK: SENSORS ===
sensor:
  # WiFi Signal
  - platform: wifi_signal
    name: "WiFi Signal"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
  
  # Uptime
  - platform: uptime
    name: "Betriebszeit"
    id: uptime_sensor
    update_interval: 60s
    entity_category: "diagnostic"
  
  # Bewässerungszeit heute
  - platform: template
    name: "Bewässerungszeit heute"
    lambda: |-
      return id(total_water_time_today) / 60.0;
    unit_of_measurement: "min"
    accuracy_decimals: 0
    update_interval: 60s
    icon: mdi:water-clock
  
  # WiFi Reconnects
  - platform: template
    name: "WiFi Reconnects"
    lambda: |-
      return id(wifi_reconnect_count);
    accuracy_decimals: 0
    update_interval: 60s
    entity_category: "diagnostic"
    icon: mdi:wifi-refresh
# === END BLOCK: SENSORS ===

# === BLOCK: TEXT_SENSORS ===
text_sensor:
  # WiFi Info
  - platform: wifi_info
    ip_address:
      name: "IP Adresse"
      entity_category: "diagnostic"
    ssid:
      name: "WiFi SSID"
      entity_category: "diagnostic"
  
  # Version
  - platform: version
    name: "ESPHome Version"
    entity_category: "diagnostic"
  
  # Betriebszeit formatiert
  - platform: template
    name: "Betriebszeit formatiert"
    lambda: |-
      int seconds = round(id(uptime_sensor).raw_state);
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds / 60;
      std::string result = "";
      if (days > 0) result += to_string(days) + "d ";
      if (hours > 0) result += to_string(hours) + "h ";
      result += to_string(minutes) + "m";
      return optional<std::string>(result);
    icon: mdi:clock-start
    update_interval: 60s
    entity_category: "diagnostic"
  
  # Bewässerungsstatus
  - platform: template
    name: "Bewässerungsstatus"
    lambda: |-
      if (id(garden_sprinkler_ctrlr).active_valve().has_value()) {
        int valve = id(garden_sprinkler_ctrlr).active_valve().value();
        return optional<std::string>("Zone " + to_string(valve + 1) + " aktiv");
      } else if (id(garden_sprinkler_ctrlr).paused_valve().has_value()) {
        return optional<std::string>("Pausiert");
      } else {
        return optional<std::string>("Bereit");
      }
    update_interval: 5s
    icon: mdi:information-outline
  
  # Letzte Bewässerung
  - platform: template
    name: "Letzte Bewässerung"
    lambda: |-
      if (id(last_watering_timestamp) == 0) {
        return optional<std::string>("Noch nie");
      }
      time_t now = id(sntp_time).now().timestamp;
      int diff = now - id(last_watering_timestamp);
      if (diff < 3600) {
        return optional<std::string>("Vor " + to_string(diff / 60) + " Minuten");
      } else if (diff < 86400) {
        return optional<std::string>("Vor " + to_string(diff / 3600) + " Stunden");
      } else {
        return optional<std::string>("Vor " + to_string(diff / 86400) + " Tagen");
      }
    update_interval: 60s
    icon: mdi:clock-outline
  
  # WiFi Qualität
  - platform: template
    name: "WiFi Qualität"
    lambda: |-
      float signal = id(wifi_signal_db).state;
      if (signal >= -30) return {"Ausgezeichnet"};
      if (signal >= -50) return {"Sehr gut"};
      if (signal >= -60) return {"Gut"};
      if (signal >= -70) return {"Akzeptabel"};
      if (signal >= -80) return {"Schwach"};
      return {"Sehr schwach"};
    icon: "mdi:wifi"
    update_interval: 60s
    entity_category: "diagnostic"
# === END BLOCK: TEXT_SENSORS ===

# === BLOCK: BINARY_SENSORS ===
binary_sensor:
  # Zone Status
  - platform: template
    name: "Zone 1 aktiv"
    lambda: |-
      return id(garden_sprinkler_ctrlr).active_valve().value_or(-1) == 0;
    device_class: running
  
  - platform: template
    name: "Zone 2 aktiv"
    lambda: |-
      return id(garden_sprinkler_ctrlr).active_valve().value_or(-1) == 1;
    device_class: running
  
  # System bereit
  - platform: template
    name: "System bereit"
    lambda: |-
      return !id(garden_sprinkler_ctrlr).active_valve().has_value();
    device_class: running
    icon: mdi:check-circle
  
  # WiFi Status
  - platform: status
    name: "WiFi Status"
    id: wifi_connected
    internal: true
# === END BLOCK: BINARY_SENSORS ===

# === BLOCK: BUTTONS ===
button:
  # Neustart
  - platform: restart
    name: "Neustart"
    entity_category: "diagnostic"
  
  # NOTFALL STOP
  - platform: template
    name: "NOTFALL STOP"
    icon: mdi:stop-circle
    entity_category: "config"
    on_press:
      - sprinkler.shutdown: garden_sprinkler_ctrlr
      - switch.turn_off: zone_1_relay
      - switch.turn_off: zone_2_relay
      - logger.log: 
          level: WARN
          format: "NOTFALL STOP aktiviert! Alle Zonen deaktiviert!"
  
  # WiFi Reconnect
  - platform: template
    name: "WiFi Reconnect"
    icon: mdi:wifi-refresh
    entity_category: "diagnostic"
    on_press:
      - logger.log: "Manueller WiFi Reconnect angefordert"
      - wifi.disable:
      - delay: 2s
      - wifi.enable:
# === END BLOCK: BUTTONS ===

# === BLOCK: SPRINKLER_CONTROLLER ===
sprinkler:
  - id: garden_sprinkler_ctrlr
    name: "Garten Bewässerung"
    
    # Hauptschalter
    main_switch: 
      name: "Bewässerung Hauptschalter"
      icon: mdi:water
    
    # Auto-Sequenz
    auto_advance_switch: 
      name: "Auto-Sequenz"
      icon: mdi:play-circle
      restore_mode: RESTORE_DEFAULT_ON
    
    # Rückwärts-Modus
    reverse_switch: 
      name: "Rückwärts-Modus"
      icon: mdi:rotate-left
      restore_mode: RESTORE_DEFAULT_OFF
    
    # Standby
    standby_switch:
      name: "Standby Modus"
      icon: mdi:pause-circle
      restore_mode: RESTORE_DEFAULT_OFF
    
    # Multiplikator für Bewässerungsdauer
    multiplier_number:
      name: "Dauer Multiplikator"
      icon: mdi:multiplication
      initial_value: 1.0
      min_value: 0.1
      max_value: 3.0
      step: 0.1
      restore_value: true
    
    # Wiederholungen
    repeat_number:
      name: "Wiederholungen"
      icon: mdi:repeat
      initial_value: 1
      min_value: 0
      max_value: 10
      restore_value: true
    
    # Ventil-Konfiguration
    valves:
      # Zone 1
      - valve_switch: 
          name: "Zone 1"
          icon: mdi:sprinkler-variant
        enable_switch:
          name: "Zone 1 aktiviert"
          icon: mdi:check-circle
          restore_mode: RESTORE_DEFAULT_ON
        run_duration_number:
          name: "Zone 1 Dauer"
          icon: mdi:timer-sand
          initial_value: 10
          min_value: 1
          max_value: 60
          step: 1
          unit_of_measurement: "min"
        valve_switch_id: zone_1_relay
      
      # Zone 2
      - valve_switch:
          name: "Zone 2"
          icon: mdi:sprinkler-variant
        enable_switch:
          name: "Zone 2 aktiviert"
          icon: mdi:check-circle
          restore_mode: RESTORE_DEFAULT_ON
        run_duration_number:
          name: "Zone 2 Dauer"
          icon: mdi:timer-sand
          initial_value: 15
          min_value: 1
          max_value: 60
          step: 1
          unit_of_measurement: "min"
        valve_switch_id: zone_2_relay
# === END BLOCK: SPRINKLER_CONTROLLER ===

# === END BLOCK: BEWÄSSERUNGSCOMPUTER_CONFIG ===