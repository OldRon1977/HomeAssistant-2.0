# === BLOCK: AUTOMATION_LICHT_SONNENUNTERGANG ===
# Zweck: Schaltet alle Lichter bei Sonnenuntergang ein
# Status: ‚úÖ Getestet - Delays implementiert
# Erstellt: 2025-08-22
# Ge√§ndert: 2025-08-23 - Delays hinzugef√ºgt
# Abh√§ngigkeiten: switch.steckdose_1-5, switch.licht_haustur_licht_haustur
# WICHTIG: 0.5s Delay zwischen Schaltungen wegen Stromspitzen!

- id: licht_sonnenuntergang
  alias: Licht - Sonnenuntergang alle an
  description: Schaltet alle Lichter bei Sonnenuntergang mit 0.5s Verz√∂gerung ein
  triggers:
  - trigger: sun
    event: sunset
  actions:
  - action: switch.turn_on
    target:
      entity_id: switch.steckdose_1
  - delay:
      milliseconds: 500
  - action: switch.turn_on
    target:
      entity_id: switch.steckdose_2
  - delay:
      milliseconds: 500
  - action: switch.turn_on
    target:
      entity_id: switch.steckdose_3
  - delay:
      milliseconds: 500
  - action: switch.turn_on
    target:
      entity_id: switch.steckdose_4
  - delay:
      milliseconds: 500
  - action: switch.turn_on
    target:
      entity_id: switch.steckdose_5
  - delay:
      milliseconds: 500
  - action: switch.turn_on
    target:
      entity_id: switch.licht_haustur_licht_haustur

# === END BLOCK: AUTOMATION_LICHT_SONNENUNTERGANG ===

# === BLOCK: AUTOMATION_LICHT_NACHTABSCHALTUNG ===
# Zweck: Schaltet Wohnzimmerlichter um 23:00 aus
# Status: ‚úÖ Getestet - Delays implementiert
# Erstellt: 2025-08-22
# Ge√§ndert: 2025-08-23 - Delays hinzugef√ºgt
# Abh√§ngigkeiten: switch.steckdose_1-5
# WICHTIG: 0.5s Delay zwischen Schaltungen wegen Stromspitzen!

- id: licht_nachtabschaltung
  alias: Licht - Nachtabschaltung 23:00
  description: Schaltet Wohnzimmerlichter um 23:00 mit 0.5s Verz√∂gerung aus
  triggers:
  - trigger: time
    at: '23:00:00'
  actions:
  - action: switch.turn_off
    target:
      entity_id: switch.steckdose_1
  - delay:
      milliseconds: 500
  - action: switch.turn_off
    target:
      entity_id: switch.steckdose_2
  - delay:
      milliseconds: 500
  - action: switch.turn_off
    target:
      entity_id: switch.steckdose_3
  - delay:
      milliseconds: 500
  - action: switch.turn_off
    target:
      entity_id: switch.steckdose_4
  - delay:
      milliseconds: 500
  - action: switch.turn_off
    target:
      entity_id: switch.steckdose_5

# === END BLOCK: AUTOMATION_LICHT_NACHTABSCHALTUNG ===

# === BLOCK: AUTOMATION_LICHT_SONNENAUFGANG ===
# Zweck: Schaltet Au√üenlampe bei Sonnenaufgang aus
# Status: ‚úÖ Getestet
# Erstellt: 2025-08-22
# Abh√§ngigkeiten: switch.licht_haustur_licht_haustur

- id: licht_sonnenaufgang
  alias: Licht - Sonnenaufgang Au√üenlampe aus
  description: Schaltet Au√üenlampe bei Sonnenaufgang aus
  triggers:
  - trigger: sun
    event: sunrise
  actions:
  - action: switch.turn_off
    target:
      entity_id: switch.licht_haustur_licht_haustur

# === END BLOCK: AUTOMATION_LICHT_SONNENAUFGANG ===

# === BLOCK: AUTOMATION_LICHT_WINTER_MORGEN_AN ===
# Zweck: Morgenbeleuchtung f√ºr Kinder im Winter
# Status: ‚úÖ Getestet mit skip_condition
# Erstellt: 2025-08-22
# Ge√§ndert: 2025-08-23 - Delays hinzugef√ºgt
# Abh√§ngigkeiten: switch.steckdose_1-5, sun.sun
# Bedingung: Nur wenn Sonnenaufgang nach 07:00 (Winter)
# WICHTIG: 0.5s Delay zwischen Schaltungen wegen Stromspitzen!

- id: licht_winter_morgen_an
  alias: Licht - Winter 07:00 Wohnzimmer an
  description: Schaltet Wohnzimmerlichter um 07:00 ein, nur wenn Sonnenaufgang vor
    07:00
  triggers:
  - trigger: time
    at: 07:00:00
  conditions:
  - condition: template
    value_template: '{{ as_timestamp(state_attr(''sun.sun'', ''next_rising'')) < as_timestamp(today_at(''07:00''))
      }}'
  actions:
  - action: switch.turn_on
    target:
      entity_id: switch.steckdose_1
    data: {}
  - delay:
      milliseconds: 500
  - action: switch.turn_on
    target:
      entity_id: switch.steckdose_2
    data: {}
  - delay:
      milliseconds: 500
  - action: switch.turn_on
    target:
      entity_id: switch.steckdose_3
    data: {}
  - delay:
      milliseconds: 500
  - action: switch.turn_on
    target:
      entity_id: switch.steckdose_4
    data: {}
  - delay:
      milliseconds: 500
  - action: switch.turn_on
    target:
      entity_id: switch.steckdose_5
    data: {}

# === END BLOCK: AUTOMATION_LICHT_WINTER_MORGEN_AN ===

# === BLOCK: AUTOMATION_LICHT_WINTER_MORGEN_AUS ===
# Zweck: Beendet Morgenbeleuchtung im Winter
# Status: ‚úÖ Getestet - Delays implementiert
# Erstellt: 2025-08-22
# Ge√§ndert: 2025-08-23 - Delays hinzugef√ºgt
# Abh√§ngigkeiten: switch.steckdose_1-5, sun.sun
# Bedingung: Nur wenn Sonnenaufgang nach 07:00 (Winter)
# WICHTIG: 0.5s Delay zwischen Schaltungen wegen Stromspitzen!

- id: licht_winter_morgen_aus
  alias: Licht - Winter 08:00 Wohnzimmer aus
  description: Schaltet Wohnzimmerlichter um 08:00 aus, nur wenn Sonnenaufgang vor
    07:00
  triggers:
  - trigger: time
    at: 08:00:00
  conditions:
  - condition: template
    value_template: '{{ as_timestamp(state_attr(''sun.sun'', ''next_rising'')) < as_timestamp(today_at(''07:00''))
      }}'
  actions:
  - action: switch.turn_off
    target:
      entity_id: switch.steckdose_1
    data: {}
  - delay:
      milliseconds: 500
  - action: switch.turn_off
    target:
      entity_id: switch.steckdose_2
    data: {}
  - delay:
      milliseconds: 500
  - action: switch.turn_off
    target:
      entity_id: switch.steckdose_3
    data: {}
  - delay:
      milliseconds: 500
  - action: switch.turn_off
    target:
      entity_id: switch.steckdose_4
    data: {}
  - delay:
      milliseconds: 500
  - action: switch.turn_off
    target:
      entity_id: switch.steckdose_5
    data: {}

# === END BLOCK: AUTOMATION_LICHT_WINTER_MORGEN_AUS ===

# === BLOCK: AUTOMATION_KRITISCHE_INFRASTRUKTUR ===
# Zweck: Stromausfall-Recovery f√ºr lebensnotwendige Ger√§te
# Status: üîÑ Neu - Stromausfall-Schutz
# Erstellt: 2025-08-23
# Abh√§ngigkeiten: 12 kritische Switches
# WICHTIG: L√§uft jede Minute + bei HA-Start - idempotent!

- id: kritische_infrastruktur_immer_an
  alias: Kritische Infrastruktur - Immer An
  description: Stellt sicher, dass kritische Ger√§te nach Stromausfall wieder eingeschaltet
    werden
  trigger:
  - trigger: time_pattern
    minutes: /1
  - trigger: homeassistant
    event: start
  action:
  - action: switch.turn_on
    target:
      entity_id:
      - switch.kuhlschrank
      - switch.kuhlschrank_keller
      - switch.froster_kuche
      - switch.steckdose_31_heizung
      - switch.steckdose_23_wasserenthaerter
      - switch.steckdose_26_franke_heisswasser
      - switch.steckdose_27_franke_chiller
      - switch.steckdose_21_waschmaschine
      - switch.steckdose_22_trockner
      - switch.steckdose_30_spuelmaschine
      - switch.steckdose_34_tp_link_switch
      - switch.espsomfy

# === END BLOCK: AUTOMATION_KRITISCHE_INFRASTRUKTUR ===

# === BLOCK: AUTOMATION_SCHLAFBOOSTER_PHASE2 ===
# Zweck: Automatische Umschaltung Schlafbooster zu Nachtmodus
# Status: üîÑ Neu - 2-Phasen-System
# Erstellt: 2025-08-23
# Abh√§ngigkeiten: climate.*, input_boolean.schlafbooster_aktiv, script.klima_schlafbooster_phase2

- id: schlafbooster_phase2_trigger
  alias: Schlafbooster - Auto Wechsel zu Phase 2
  description: Wechselt automatisch in leisen Modus wenn 21¬∞C erreicht
  trigger:
  - trigger: numeric_state
    entity_id:
    - climate.schlafzimmer
    - climate.finn
    - climate.nele
    - climate.jacob
    attribute: current_temperature
    below: 21.5
  condition:
  - condition: state
    entity_id: input_boolean.schlafbooster_aktiv
    state: 'on'
  - condition: template
    value_template: "{{ \n  state_attr('climate.schlafzimmer', 'current_temperature')
      <= 21.5 or\n  state_attr('climate.finn', 'current_temperature') <= 21.5 or\n
      \ state_attr('climate.nele', 'current_temperature') <= 21.5 or\n  state_attr('climate.jacob',
      'current_temperature') <= 21.5\n}}\n"
  action:
  - delay: 30
  - action: script.turn_on
    target:
      entity_id: script.klima_schlafbooster_phase2
  - action: persistent_notification.create
    data:
      title: Schlafbooster
      message: Zieltemperatur erreicht - wechsle in leisen Nachtmodus
      notification_id: schlafbooster_phase2

# === END BLOCK: AUTOMATION_SCHLAFBOOSTER_PHASE2 ===

# === BLOCK: AUTOMATION_DACHLUKE_TIMER_RESTART ===
# Zweck: Startet Timer bei Dachluke-Bewegung
# Status: üîß Template korrigiert
# Erstellt: 2025-08-23
# Abh√§ngigkeiten: cover.strom_dachluke_unten_dachluke_bad_unten, timer.dachluke_auto_close

- id: dachluke_timer_restart
  alias: Dachluke - Timer bei Positions√§nderung starten
  description: Startet Timer bei jeder Dachluke-Bewegung mit einstellbarer Dauer
  trigger:
  - trigger: state
    entity_id: cover.strom_dachluke_unten_dachluke_bad_unten
    attribute: current_position
  action:
  - action: timer.cancel
    entity_id: timer.dachluke_auto_close
  - action: timer.start
    entity_id: timer.dachluke_auto_close
    data:
      duration: '{% set minutes = states(''input_number.dachluke_timer_minuten'')
        | int %} {{ ''%02d:%02d:00'' | format(0, minutes) }}

        '

# === END BLOCK: AUTOMATION_DACHLUKE_TIMER_RESTART ===

# === BLOCK: AUTOMATION_DACHLUKE_AUTO_CLOSE ===
# Zweck: Schlie√üt Dachluke nach Timer-Ablauf
# Status: ‚úÖ Getestet
# Erstellt: 2025-08-23
# Abh√§ngigkeiten: cover.strom_dachluke_unten_dachluke_bad_unten, timer.dachluke_auto_close

- id: dachluke_auto_close
  alias: Dachluke - Automatisch schlie√üen nach Timer
  description: Schlie√üt Dachluke auf 0% nach Timer-Ablauf
  trigger:
  - trigger: event
    event_type: timer.finished
    event_data:
      entity_id: timer.dachluke_auto_close
  condition:
  - condition: template
    value_template: '{{ state_attr(''cover.strom_dachluke_unten_dachluke_bad_unten'',
      ''current_position'') | int > 0 }}'
  action:
  - action: cover.set_cover_position
    entity_id: cover.strom_dachluke_unten_dachluke_bad_unten
    data:
      position: 0

# === END BLOCK: AUTOMATION_DACHLUKE_AUTO_CLOSE ===

# === BLOCK: BEWAESSERUNG_ZEITPLAN_1 ===
# Zweck: Startet Bew√§sserung nach Zeitplan 1 - IMMER mit Smart Irrigation
# Status: ‚úÖ √úberarbeitet - Nutzt immer Smart Irrigation
# Erstellt: 2025-08-25
# Ge√§ndert: 2025-08-26 - Immer Smart Irrigation statt choose
# Abh√§ngigkeiten: script.bewaesserung_auto, sensor.smart_irrigation_zone_*

- id: bewaesserung_zeitplan_1
  alias: "Bew√§sserung Zeitplan 1"
  description: "Startet Bew√§sserung nach Zeitplan 1 - immer mit Smart Irrigation"
  mode: single
  
  triggers:
    - trigger: time
      at: input_datetime.bewaesserung_start_zeit_1
  
  conditions:
    # Zeitplan muss aktiviert sein
    - condition: state
      entity_id: input_boolean.bewaesserung_zeitplan_1_aktiv
      state: 'on'
    
    # System muss bereit sein
    - condition: state
      entity_id: binary_sensor.bewcmp_system_bereit
      state: 'on'
    
    # Pr√ºfe ob heute der richtige Tag ist
    - condition: template
      value_template: >
        {% set tage = states('input_select.bewaesserung_zeitplan_1_tage') %}
        {% set heute = now().strftime('%a') %}
        {% set wochentage = {'Mon': 'Mo', 'Tue': 'Di', 'Wed': 'Mi', 'Thu': 'Do', 'Fri': 'Fr', 'Sat': 'Sa', 'Sun': 'So'} %}
        {% set heute_de = wochentage.get(heute, '') %}
        {% if tage == 'T√§glich' %}
          true
        {% elif tage == 'Auto' %}
          true
        {% elif tage == heute_de %}
          true
        {% else %}
          false
        {% endif %}
  
  actions:
    # IMMER Smart Irrigation verwenden (mit Bucket-Reset)
    - action: script.bewaesserung_auto

# === END BLOCK: BEWAESSERUNG_ZEITPLAN_1 ===

# === BLOCK: BEWAESSERUNG_ZEITPLAN_2 ===
# Zweck: Startet Bew√§sserung nach Zeitplan 2 - IMMER mit Smart Irrigation
# Status: ‚úÖ √úberarbeitet - Nutzt immer Smart Irrigation
# Erstellt: 2025-08-25
# Ge√§ndert: 2025-08-26 - Immer Smart Irrigation statt choose
# Abh√§ngigkeiten: script.bewaesserung_auto, sensor.smart_irrigation_zone_*

- id: bewaesserung_zeitplan_2
  alias: "Bew√§sserung Zeitplan 2"
  description: "Startet Bew√§sserung nach Zeitplan 2 - immer mit Smart Irrigation"
  mode: single
  
  triggers:
    - trigger: time
      at: input_datetime.bewaesserung_start_zeit_2
  
  conditions:
    # Zeitplan muss aktiviert sein
    - condition: state
      entity_id: input_boolean.bewaesserung_zeitplan_2_aktiv
      state: 'on'
    
    # System muss bereit sein
    - condition: state
      entity_id: binary_sensor.bewcmp_system_bereit
      state: 'on'
    
    # Pr√ºfe ob heute der richtige Tag ist
    - condition: template
      value_template: >
        {% set tage = states('input_select.bewaesserung_zeitplan_2_tage') %}
        {% set heute = now().strftime('%a') %}
        {% set wochentage = {'Mon': 'Mo', 'Tue': 'Di', 'Wed': 'Mi', 'Thu': 'Do', 'Fri': 'Fr', 'Sat': 'Sa', 'Sun': 'So'} %}
        {% set heute_de = wochentage.get(heute, '') %}
        {% if tage == 'T√§glich' %}
          true
        {% elif tage == 'Auto' %}
          true
        {% elif tage == heute_de %}
          true
        {% else %}
          false
        {% endif %}
  
  actions:
    # IMMER Smart Irrigation verwenden (mit Bucket-Reset)
    - action: script.bewaesserung_auto

# === END BLOCK: BEWAESSERUNG_ZEITPLAN_2 ===

# === BLOCK: BEWAESSERUNG_SICHERHEITS_STOP ===
# Zweck: Stoppt Bew√§sserung nach 2 Stunden als Sicherheit - √úBERARBEITET
# Status: üîÑ Neu - ESPHome Sprinkler Integration
# Erstellt: 2025-08-25
# Abh√§ngigkeiten: script.bewaesserung_stop
# WICHTIG: Nutzt ESPHome Sprinkler Shutdown statt Notfall-Button

- id: bewaesserung_sicherheits_stop
  alias: "Bew√§sserung Sicherheits-Stop"
  description: "Stoppt Bew√§sserung nach 2 Stunden als Sicherheit"
  mode: restart
  
  triggers:
    # Zone 1 l√§uft zu lange
    - trigger: state
      entity_id: binary_sensor.bewcmp_zone_1_aktiv
      to: 'on'
      for:
        hours: 2
    
    # Zone 2 l√§uft zu lange
    - trigger: state
      entity_id: binary_sensor.bewcmp_zone_2_aktiv
      to: 'on'
      for:
        hours: 2
  
  actions:
    # Stoppe Bew√§sserung √ºber Script (nutzt ESPHome Sprinkler)
    - action: script.bewaesserung_stop
    
    # Benachrichtigung
    - action: persistent_notification.create
      data:
        title: "Bew√§sserung Sicherheits-Stop"
        message: "Bew√§sserung wurde nach 2 Stunden automatisch gestoppt!"
        notification_id: bewaesserung_sicherheitsstop

# === END BLOCK: BEWAESSERUNG_SICHERHEITS_STOP ===